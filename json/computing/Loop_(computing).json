{"cursor":"42610","size":15,"audio":[],"currentlang":"en","article":"\nIn computer science, 'control flow' (or alternatively, flow of control) refers\nto the order in which the individual statements, instructions or function calls\nof an imperative or a declarative program are executed or evaluated.\n\nWithin an imperative programming language, a 'control flow statement' is a\nstatement whose execution results in a choice being made as to which of two or\nmore paths should be followed. For non-strict functional languages, functions\nand language constructs exist to achieve the same result, but they are not\nnecessarily called control flow statements.\n\nThe kinds of control flow statements supported by different languages vary, but\ncan be categorized by their effect:\n\n* continuation at a different statement (unconditional branch or jump),\n* executing a set of statements only if some condition is met (choice - i.e.,\n  conditional branch),\n* executing a set of statements zero or more times, until some condition is met\n  (i.e., loop - the same as conditional branch),\n* executing a set of distant statements, after which the flow of control usually\n  returns (subroutines, coroutines, and continuations),\n* stopping the program, preventing any further execution (unconditional halt).\n\nA set of statements is in turn generally structured as a block, which in\naddition to grouping also defines a lexical scope.\n\nInterrupts and signals are low-level mechanisms that can alter the flow of\ncontrol in a way similar to a subroutine, but usually occur as a response to\nsome external stimulus or event (that can occur asynchronously), rather than\nexecution of an 'in-line' control flow statement. Self-modifying code can also\nbe used to affect control flow through its side effects, but does not usually\ninvolve an explicit control flow statement (an exception being the ALTER verb\nin COBOL).\n\nAt the level of machine or assembly language, control flow instructions usually\nwork by altering the program counter. For some CPUs the only control flow\ninstructions available are conditional or unconditional branch instructions\n(also called jumps).\n","linknr":496,"url":"Loop_(computing)","recorded":1362564891,"links":30,"instances":["programming_language","computing","computers","programming_language","computer_science","programming_language","programming_language","programming","computer_science","computer_science","programming_language","programming_language","computing","programming","computer_science","programming_language","programming","programming","programming_language","data_structure","programming_language","programming_language","programming_language","computer_science","computing","programming_language","programming_language","programming_language","programming_language","programming","programming"],"pdf":["http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf","http://www.bitsavers.org/pdf/ibm/704/24-6661-2_704_Manual_1955.pdf"],"categories":["Control flow|","Articles with example Ada code"],"headings":["Primitives","Minimal structured control flow","Control structures in practice","Choice","Loops","Loop sublanguage","Structured non-local control flow","Proposed control structures","See also","References","External links"],"image":["//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png","//upload.wikimedia.org/wikipedia/commons/thumb/d/df/Wikibooks-logo-en-noslogan.svg/40px-Wikibooks-logo-en-noslogan.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["statement","computer_science"],["instruction","computer_science"],["execution","computers"],["branch","computer_science"],["block","programming"],["signal","computing"],["side_effect","computer_science"],["branch","computer_science"],["label","programming_language"],["c","programming_language"],["keyword","computing"],["class","programming"],["modularity","programming"],["c","programming_language"],["haskell","programming_language"],["java","programming_language"],["python","programming_language"],["pascal","programming_language"],["ada","programming_language"],["c","programming_language"],["python","programming_language"],["lisp","programming_language"],["operator","programming"],["glob","programming"],["pascal","programming_language"],["ada","programming_language"],["c","programming_language"],["haskell","programming_language"],["scheme","programming_language"],["recursion","computer_science"],["java","programming_language"],["c_sharp","programming_language"],["ruby","programming_language"],["python","programming_language"],["server","computing"],["python","programming_language"],["eiffel","programming_language"],["java","programming_language"],["lisp","programming_language"],["common_lisp","programming_language"],["c","programming_language"],["c_sharp","programming_language"],["d","programming_language"],["eiffel","programming_language"],["f_sharp","programming_language"],["haskell","programming_language"],["java","programming_language"],["python","programming_language"],["ruby","programming_language"],["template","programming"],["container","data_structure"],["ada","programming_language"],["c","programming_language"],["c_sharp","programming_language"],["common_lisp","programming_language"],["d","programming_language"],["eiffel","programming_language"],["haskell","programming_language"],["java","programming_language"],["python","programming_language"],["ruby","programming_language"],["branch","computer_science"]],"members":["common_lisp","keyword","execution","d","instruction","lisp","pascal","operator","side_effect","statement","ada","haskell","server","glob","recursion","python","template","modularity","java","container","ruby","scheme","f_sharp","branch","signal","c","eiffel","c_sharp","label","block","class"],"related":["Computer_science","Statement_(computer_science)","Instruction_(computer_science)","Function_call","Imperative_programming","Declarative_programming","Computer_program","Execution_(computers)","Programming_language","Strict_programming_language","Unconditional_branch","Branch_(computer_science)","Conditional_branch","Conditional_branch","Subroutine","Coroutine","Continuation","Block_(programming)","Lexical_scope","Interrupt","Signal_(computing)","Asynchronous_systems","Self-modifying_code","Side_effect_(computer_science)","COBOL","Machine_language","Assembly_language","Program_counter","Central_processing_unit","Branch_(computer_science)","Label_(programming_language)","Source_code","Line_number","Fortran","BASIC_programming_language","Natural_number","C_(programming_language)","Ada_programming_language","Identifier","Algol_60","Keyword_(computing)","Considered_harmful","Edsger_W._Dijkstra","Subroutine","Class_(programming)","Type_class","Modularity_(programming)","Comm._ACM","One_instruction_set_computer","Non-strict_programming_language","Software_transactional_memory","Algol_programming_language","C_(programming_language)","C++","Haskell_(programming_language)","Java_(programming_language)","Pascal_programming_language","Perl","PHP","PL/I_programming_language","Python_(programming_language)","Windows_PowerShell","Curly_bracket_programming_language","Off-side_rule","Ada_programming_language","Algol_68","Modula-2","Fortran","Mythryl","Visual_Basic","Programming_language","Boolean_datatype","C","Pascal_(programming_language)","Ada_(programming_language)","C_(programming_language)","Shell_script","Python_(programming_language)","Lisp_(programming_language)","Fortran","Arithmetic_if","Functional_analysis","LISP","Operator_(programming)","Ternary_operator","Perl","Smalltalk","Switch_statement","Lookup_table","Dynamic_language","Pattern_matching","Shell_script","Glob_(programming)","SQL","Pascal_(programming_language)","Ada_(programming_language)","C_(programming_language)","Shell_script","Infinite_loop","Functional_programming","Haskell_(programming_language)","Scheme_(programming_language)","Recursion_(computer_science)","Fixed_point_combinator","Tail_recursion","Control_break","Ada_programming_language","D_programming_language","Smalltalk","PHP","Perl","Object_Pascal","Java_(programming_language)","C_Sharp_(programming_language)","Mythryl","Visual_Basic","Ruby_(programming_language)","Python_(programming_language)","JavaScript","Fortran_95","Common_Lisp","Infinite_loop","Server_(computing)","Ada_programming_language","Python_(programming_language)","Loop_variant","Loop_invariant","Eiffel_(programming_language)","Java_Modeling_Language","Java_(programming_language)","Lisp_(programming_language)","Interlisp","Common_Lisp_(programming_language)","Programming_language","Ada_programming_language","C_(programming_language)","C++","C_Sharp_(programming_language)","Common_Lisp","D_(programming_language)","Eiffel_(programming_language)","F_Sharp_(programming_language)","FORTRAN_77","Fortran_90","Fortran_95","Haskell_(programming_language)","Java_(programming_language)","JavaScript","OCaml","PHP","Perl","Python_(programming_language)","REBOL","Ruby_(programming_language)","Standard_ML","Visual_Basic_.NET","Windows_PowerShell","C++11","Standard_Template_Library","Template_(programming)","Container_(data_structure)","Unary_function","Java_Modeling_Language","PL/I_programming_language","Name_binding","AppleScript","Scripting_programming_language","Programming_language","Ada_(programming_language)","C_(programming_language)","C++","C_Sharp_(programming_language)","Common_Lisp_(programming_language)","D_(programming_language)","Eiffel_(programming_language)","Haskell_(programming_language)","Java_(programming_language)","Mythryl","Objective-C","PHP","PL/I","Python_(programming_language)","REBOL","Ruby_(programming_language)","Visual_Basic_.NET","Windows_PowerShell","Datamation","COMEFROM","INTERCAL","Esoteric_programming_language","ACM_Computing_Surveys","Donald_Knuth","Ole-Johan_Dahl","Ada_programming_language","Zahn's_construct","Exception_handling","Branch_(computer_science)","Control_flow_diagram","Control_flow_graph","Control_table","Coroutine","Cyclomatic_complexity","Flowchart","GOTO","Jeroo","Main_loop","Recursion","Spaghetti_code","Structured_programming","Subroutine","Switch_statement"]}