{"cursor":"3238","size":15,"audio":[],"currentlang":"en","article":"In computer science, an 'aspect' of a program is a feature linked to many other\nparts of the program, but which is not related to the program's primary\nfunction. An aspect crosscuts the program's core concerns, therefore violating\nits separation of concerns that tries to encapsulate unrelated functions. For\nexample, logging code can crosscut many modules, yet the aspect of logging\nshould be separate from the functional concerns of the module it cross-cuts.\nIsolating such aspects as logging and persistence from business logic is the aim\nof aspect-oriented software development (AOSD), of which the aspect-oriented\nprogramming (AOP) paradigm is the most widely employed.\n\nAspect-orientation is not limited to programming since it is useful to identify,\nanalyse, trace and modularise concerns (e.g., PREview) through requirements\nelicitation, specification and design. Aspects can be multi-dimensional by\nallowing both functional and non-functional behaviour to crosscut any other\nconcerns, instead of just mapping non-functional concerns to functional\nrequirements.\n\nOne view of aspect-oriented software development is that every major feature of\nthe program, core concern (business logic), or cross-cutting concern (additional\nfeatures), is an aspect, and by weaving them together (a process also called\ncomposition), one finally produces a whole out of the separate aspects. This\napproach is known as pure aspect programming, but hybrid approaches are more\ncommonly used, perhaps since there is less of a paradigm shift between object-\nand aspect-oriented programming. There is a similar situation with early aspect\nsoftware development (e.g., requirements), with traditional methods being\nenhanced for aspect-orientation and new models proposed. Non-functional concerns\n(e.g., security) can crosscut functional concerns (e.g., door must be present).\nIt is possible for functional concerns to crosscut non-functional or functional\nconcerns (e.g., need for more features harms mobility). A uniform approach to\nrepresentation and composition, similar to the pure approach in AOP, is termed\nmultidimensional representation.\n\nThe prism analogy describes aspects with terms from the domain of light. Like\nsplitting light into its many aspects (different colours) with a prism, one\nsplits a problem into its separate aspects. With another prism you can put the\ndifferent colours back into a white ray of light, and by the process of weaving\naspects one can put the solutions for the different aspects of a problem back\ninto a solution for the whole problem.\n","linknr":118,"url":"Aspect_(computer_programming)","recorded":1362899131,"links":15,"instances":[],"pdf":[],"categories":["Aspect-oriented software development","Aspect-oriented programming","Article Feedback 5"],"headings":["See also","References"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//upload.wikimedia.org/wikipedia/commons/thumb/0/03/AspectWeaver.svg/150px-AspectWeaver.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[],"members":[],"related":["Computer_science","Cross-cutting_concern","Core_concern","Separation_of_concerns","Data_logging","Persistence","Business_logic","Aspect-oriented_software_development","Aspect-oriented_programming","Programming_paradigm","PREview","Aspect_weaver","AspectJ"]}