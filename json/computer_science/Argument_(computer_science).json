{"cursor":"13516","size":15,"audio":[],"currentlang":"en","article":"In computer programming, a 'parameter' is a special kind of variable, used in a\nsubroutine to refer to one of the pieces of data provided as input to the\nsubroutine. In this article, the term \"subroutine\" refers to any subroutine-\nlike construct, which have different names and slightly different meanings\ndepending on the programming language being discussed. These pieces of\ndata are called 'arguments'. An ordered list of parameters is usually included\nin the definition of a subroutine, so that, each time the subroutine is called,\nits arguments for that call can be assigned to the corresponding parameters.\n\nJust as in standard mathematical usage, the argument is thus the actual value\npassed to a function, procedure, or routine (such as 37 in log(37)), whereas the\nparameter is a reference to that value inside the implementation of the function\n(log in this case). See the Parameters and arguments section for more\ninformation.\n\nIn the most common case, call-by-value, a parameter acts within the subroutine\nas a local (isolated) copy of the argument, but in other cases, e.g. call-by-\nreference, the argument supplied by the caller can be affected by actions within\nthe called subroutine (as discussed in evaluation strategy).\n\nThe semantics for how parameters can be declared and how the arguments get\npassed to the parameters of subroutines are defined by the language, but the\ndetails of how this is represented in any particular computer system depend on\nthe calling conventions of that system.\n","linknr":162,"url":"Argument_(computer_science)","recorded":1362666284,"links":25,"instances":["programming_language","programming","programming_language","programming_language","programming_language","program_lifecycle_phase","programming_language","programming_language","programming_language"],"pdf":[],"categories":["Subroutines","Variable (computer programming)"],"headings":["Example","Parameters and arguments","Datatypes","Argument passing","See also","References"],"image":["//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["variable","programming"],["c","programming_language"],["run_time","program_lifecycle_phase"],["c","programming_language"],["eiffel","programming_language"],["ada","programming_language"],["python","programming_language"],["ruby","programming_language"],["ml","programming_language"],["haskell","programming_language"]],"members":["python","variable","ml","ruby","c","run_time","eiffel","ada","haskell"],"related":["Computer_programming","Variable_(programming)","Subroutine","Programming_language","Call-by-value","Local_variable","Call-by-reference","Evaluation_strategy","Calling_convention","C_(programming_language)","Floating_point","Run_time_(program_lifecycle_phase)","C_(programming_language)","Runtime_error","Eiffel_(programming_language)","Generic_programming","Associative_array","Strongly_typed_programming_language","Datatype","Type_inference","Type_theory","Evaluation_strategy","Ada_(programming_language)","C++","Clojure","Common_Lisp","Fortran_90","Python_(programming_language)","Ruby_(programming_language)","Windows_PowerShell","Default_argument","Variadic_function","Named_parameter","Self-documenting","Lambda_calculus","Currying","ML_(programming_language)","Haskell_(programming_language)","Syntactic_sugar","Operator_associativity","Command-line_argument","Evaluation_strategy","Operator_overloading","Free_variables_and_bound_variables"]}