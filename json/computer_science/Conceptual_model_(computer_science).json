{"cursor":"3407","size":15,"audio":[],"currentlang":"en","article":"A mental model captures ideas in a problem domain, while a conceptual model\nrepresents 'concepts' (entities) and relationships between them. A Conceptual\nmodel in the field of computer science is also known as a domain model.\nConceptual modeling should not be confused with other modeling disciplines such\nas data modelling, logical modelling and physical modelling. The conceptual\nmodel is explicitly chosen to be independent of design or implementation\nconcerns, for example, concurrency or data storage. The aim of a conceptual\nmodel is to express the meaning of terms and concepts used by domain experts to\ndiscuss the problem, and to find the correct relationships between different\nconcepts. The conceptual model attempts to clarify the meaning of various,\nusually ambiguous terms, and ensure that problems with different interpretations\nof the terms and concepts cannot occur. Such differing interpretations could\neasily cause confusion amongst stakeholders, especially those responsible for\ndesigning and implementing a solution, where the conceptual model provides a key\nartifact of business understanding and clarity. Once the domain concepts have\nbeen modeled, the model becomes a stable basis for subsequent development of\napplications in the domain. The concepts of the conceptual model can be mapped\ninto physical design or implementation constructs using either manual or\nautomated code generation approaches. The realization of conceptual models of\nmany domains can be combined to a coherent platform.\n\nA conceptual model can be described using various notations, such as UML or\nOMT for object modelling, or IE or IDEF1X for Entity Relationship Modelling.\nIn UML notation, the conceptual model is often described with a class diagram\nin which classes represent concepts, associations represent relationships\nbetween concepts and role types of an association represent role types taken\nby instances of the modelled concepts in various situations. In ER notation,\nthe conceptual model is described with an ER Diagram in which entities\nrepresent concepts, cardinality and optionality represent relationships\nbetween concepts. Regardless of the notation used, it is important not to\ncompromise the richness and clarity of the business meaning depicted in the\nconceptual model by expressing it directly in a form influenced by design or\nimplementation concerns.\n\nThis is often used for defining different processes in a particular Company or\nInstitute.\n","linknr":94,"url":"Conceptual_model_(computer_science)","recorded":1362374840,"links":12,"instances":["computer_science","software_engineering"],"pdf":[],"categories":["Object-oriented programming","Software requirements"],"headings":["Literature"],"image":["//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["stability","software_engineering"],["class","computer_science"],["association","object-oriented_programming"]],"members":["association","class","stability"],"related":["Mental_model","Problem_domain","Domain_model","Data_modelling","Logical_modelling","Physical_modelling","Stability_(software_engineering)","Model-driven_development","Unified_Modeling_Language","Object-modeling_technique","Information_Engineering","IDEF1X","Entity-relationship_model","Class_diagram","Class_(computer_science)","Association_(object-oriented_programming)","Role_type","Cardinality","Optionality","Martin_Fowler"]}