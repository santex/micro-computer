{"cursor":"11485","size":15,"audio":[],"currentlang":"en","article":"\nIn computer science, 'records' (also called 'tuples', 'structs', or 'compound\ndata') Felleisen et al., How To Design Programs, MIT Press, 2001 are\namong the simplest data structures. A record is a value that contains other\nvalues, typically in fixed number and sequence and typically indexed by names.\nThe elements of records are usually called fields or members.\n\nFor example, a date could be stored as a record containing a numeric year field,\na month field represented as a string, and a numeric day-of-month field. As\nanother example, a Personnel record might contain a name, a salary, and a rank.\nAs yet another example, a Circle record might contain a center and a radius. In\nthis instance, the center itself might be represented as a Point record\ncontaining x and y coordinates.\n\nRecords are distinguished from arrays by the fact that their number of fields\nis typically fixed, each field has a name, and that each field may have a\ndifferent type.\n\nA 'record type' is a data type that describes such values and variables. Most\nmodern computer languages allow the programmer to define new record types. The\ndefinition includes specifying the data type of each field and an identifier\n(name or label) by which it can be accessed. In type theory, product types (with\nno field names) are generally preferred due to their simplicity, but proper\nrecord types are studied in languages such as System F-sub. Since type-\ntheoretical records may contain first-class function-typed fields in addition to\ndata, they can express many features of object-oriented programming.\n\nRecords can exist in any storage medium, including main memory and mass storage\ndevices such as magnetic tapes or hard disks. Records are a fundamental\ncomponent of most data structures, especially linked data structures. Many\ncomputer files are organized as arrays of logical records, often grouped into\nlarger physical records or blocks for efficiency.\n\nThe parameters of a function or procedure can often be viewed as the fields of a\nrecord variable; and the arguments passed to that function can be viewed as a\nrecord value that gets assigned to that variable at the time of the call. Also,\nin the call stack that is often used to implement procedure calls, each entry is\nan activation record or call frame, containing the procedure parameters and\nlocal variables, the return address, and other internal fields.\n\nAn object in object-oriented language is essentially a record that contains\nprocedures specialized to handle that record; and object data types (often\ncalled object classes) are an elaboration of record types. Indeed, in most object-\noriented languages, records are just special cases of objects.\n\nA record can be viewed as the computer analog of a mathematical tuple. In the\nsame vein, a record type can be viewed as the computer language analog of the\nCartesian product of two or more mathematical sets, or the implementation of an\nabstract product type in a specific language.\n","linknr":254,"url":"Record_(computer_science)","recorded":1362672755,"links":18,"instances":["computing","information","programming_language","c_programming_language","programming_language","database","data_storage","mathematics"],"pdf":[],"categories":["Data types","Composite data types"],"headings":["History","Operations","Representation in memory","See also","References"],"image":["//upload.wikimedia.org/wikipedia/en/thumb/9/99/Question_book-new.svg/50px-Question_book-new.svg.png","//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["block","data_storage"],["set","mathematics"],["table","information"],["c","programming_language"],["ada","programming_language"],["garbage_collection","computing"],["struct","c_programming_language"],["block","data_storage"],["row","database"]],"members":["garbage_collection","table","c","struct","ada","row","block","set"],"related":["Computer_science","Data_structure","Array_data_type","Data_type","Identifier","Type_theory","Product_type","System_F-sub","First-class_function","Object-oriented_programming","Main_memory","Mass_storage_devices","Magnetic_tape","Hard_disk","Linked_data_structure","Computer_file","Storage_record","Block_(data_storage)","Subroutine","Call_stack","Object-oriented","Mathematics","Tuple","Cartesian_product","Set_(mathematics)","Product_type","Table_(information)","Ledger","Accounting","Charles_Babbage","Analytical_Engine","Punched_card","Machine_language","Assembly_language","Index_register","Indirect_addressing","Self-modifying_code","IBM_1620","Sorting","Tabulation","IBM_RPG","COBOL","FORTRAN","FORTRAN_IV","Algol_60","Fortran_77","Algol_68","Lisp_programming_language","Cons_cell","S-expression","Pascal_programming_language","PL/1","C_(programming_language)","Ada_(programming_language)","Modula","Java_programming_language","Hash_function","Debugger","Garbage_collection_(computing)","Serialization","Type_polymorphism","Complex_data_type","Cartesian_coordinates","Bit_string","Short_integer","Long_integer","COBOL","Lexicographic_order","Pascal_programming_language","Systems_programming","Floating_point","Class_inheritance","Struct_(C_programming_language)","Composite_data_type","Object_composition","Cons_cell","Storage_record","Block_(data_storage)","Data_structure_alignment","Data_hierarchy","Row_(database)"]}