{"cursor":"2252","size":15,"audio":[],"currentlang":"en","article":"In theoretical computer science, 'correctness' of an algorithm is asserted when\nit is said that the algorithm is correct with respect to a specification.\nFunctional correctness refers to the input-output behaviour of the algorithm\n(i.e., for each input it produces the correct output).\n\nA distinction is made between 'total correctness', which additionally requires\nthat the algorithm terminates, and 'partial correctness', which simply requires\nthat if an answer is returned it will be correct. Since there is no general\nsolution to the halting problem, a total correctness assertion may lie much\ndeeper. A termination proof is a type of mathematical proof that plays a\ncritical role in formal verification because total correctness of an algorithm\ndepends on termination.\n\nFor example, successively searching through integers 1, 2, 3, â¦ to see if we can\nfind an example of some phenomenon — say an odd perfect number — it\nis quite easy to write a partially correct program (using long division by two\nto check n as perfect or not). But to say this program is totally correct would\nbe to assert something currently not known in number theory.\n\nA proof would have to be a mathematical proof, assuming both the algorithm and\nspecification are given formally. In particular it is not expected to be a\ncorrectness assertion for a given program implementing the algorithm on a\ngiven machine. That would involve such considerations as limitations on\ncomputer memory.\n\nA deep result in proof theory, the Curry-Howard correspondence, states that a\nproof of functional correctness in constructive logic corresponds to a certain\nprogram in the lambda calculus. Converting a proof in this way is called program\nextraction.\n\nHoare logic is a specific formal system for reasoning rigorously about the\ncorrectness of computer programs.\n","linknr":97,"url":"Correctness_(computer_science)","recorded":1362667242,"links":13,"instances":["computer_science"],"pdf":[],"categories":["Formal methods terminology","Theoretical computer science"],"headings":["See also"],"image":["//bits.wikimedia.org/static-1.21wmf10/skins/vector/images/search-ltr.png?303-4","//bits.wikimedia.org/images/wikimedia-button.png","//bits.wikimedia.org/static-1.21wmf10/skins/common/images/poweredby_mediawiki_88x31.png"],"tags":[["program_analysis","computer_science"]],"members":["program_analysis"],"related":["Theoretical_computer_science","Algorithm","Program_specification","Halting_problem","Termination_proof","Mathematical_proof","Formal_verification","Integer","Perfect_number","Number_theory","Computer_memory","Deep_result","Proof_theory","Curry-Howard_correspondence","Constructive_logic","Lambda_calculus","Hoare_logic","Formal_system","Formal_verification","Design_by_contract","Program_analysis_(computer_science)","Model_checking","Compiler_correctness","Program_derivation"]}